<resources>
    <string name="app_name">LearningJava</string>
    <string name="title_activity_register">register</string>
    <string name="register_title"><u><b><i>Copyright</i></b></u></string>
    <string name="title_activity_aboutus">aboutus</string>
    <string name="txtURL">Visit http://www.learnjava.com.hk</string>
    <string name="txtPhone">Dial: 87654321</string>
    <string name="title_activity_main_page">MainPage</string>
    <string name="keyboard_name">JavaKeyboard</string>
    <string name="java_ime">Java IME</string>
    <string name="subtype_en_US">English (US)</string>
    <string-array name="model" >
        <item>Q2_5bird</item>
        <item>Q2_65678910</item>
        <item>Q3_215</item>
        <item>Q3_411</item>
        <item>Q4_2HelloWorld()</item>
        <item>Q4_3String</item>
        <item>Q4_4Main myDog = new Main(\"yellow\",4);</item>
        <item>Q4_6public String getColor(){return color;}</item>
        <item>Q4_85</item>
        <item>Q4_Limport mypack.Simple;</item>
        <item>Q5_1private</item>
        <item>Q5_2Programmer extends Employee</item>
        <item>Q5_3running safely with 120km</item>
        <item>Q5_4overloading</item>
        <item>Q5_5abstract void soundEffect();</item>
        <item>Q5_6wrong</item>
        <item>Q5_7(int)</item>
        <item>Q5_8downcasting</item>
        <item>Q5_9Starting...</item>
        <item>Q5_J0 2 4 6 8 </item>
        <item>Q5_LSoldier.BOMB</item>
        <item>Q5_Mimport java.awt.*;</item>
        <item>Q5_Kfalse</item>
        <item>Q6_2start()</item>
        <item>Q6_3[Green, Red, Orange]</item>
        <item>Q6_5130</item>
        <item>Q6_6[ABC, DEF]</item>
        <item>Q6_7[2,10,10,33,34]</item>
        <item>Q6_8(it.hasNext()) { value = (String) it.next(); System.out.println(value); }
       </item>
        <item>Q6_9exists()</item>
        <item>Q6_JFile file = new File(\"C:\\\\ITDog\\\\test.txt\");</item>
        <item>Q6_Kformat</item>


    </string-array>
    <string name="ex1">
public class Main{\n\n
        public static void main(String[] args){\n\n
        System.out.print(\"Java is amazing\");\n\n  }\n}</string>
    <string-array name="exercises">
        <item></item>
        <item> public class Main{\n\n public static void main(String[] args){\n\n System.out.print(\"Java is amazing\");\n\n  }\n}</item>
        <item>public class Main {\n\n

            public static void main(String[] args) {\n\n
            /*We can use the println method to prints a line of text to the screen.
            The System class and its out stream are used to access to println method.*/

            \n System.out.println(\"This is Q1_3 answer\");
            \n \n }\n\n
            }</item>

       <item>public class Main {\n\n

           public static void main(String[] args) {\n\n
           double x = 20.5;\n
           String str = \"String\";
           \n\n    System.out.println(x);
           \n     System.out.println(str);
           \n  }\n\n
           }</item>

    <item>
        public class Main {\n\n
        public static void main(String[] args) {\n\n    int x = 7;
        \n   int y = 8 ;
        \n\n   System.out.println(x+y);\n\n
        }\n\n
        } </item>
    <item>
        public class Main {\n\n

        public static void main(String[] args) {\n\n
        int x = 10;\n
        int y = 10;\n

        //x++ is called postfix. Returns the value of x and then increments
        \n  System.out.println(x++);
        \n // ++y is called prefix. Increments the value of x and then returns x
        \n System.out.println(++y);\n\n
        }\n\n
        }
    </item>
    <item>
       public class Main {\n\n
        public static void main(String[] args) {\n\n
        String str= \"string\";\n\n
        System.out.println(\"Using \"+str+\" concatenation is convenient\");\n\n
        }\n\n
        }
    </item>
    <item>
        import java.util.Scanner;\n\n
       public class Main {\n\n
        public static void main(String[] args) {\n\n
        Scanner input =new Scanner(System.in);\n\n
        System.out.println(input.next());\n\n
        }\n\n
        }
    </item>
    <item>
       public class Main {\n\n
        public static int maxFunction(int n1,int n2){\n\n
        int max;\n\n
        if(n1>n2)\n
        max=n1;\n
        else\n
        max=n2;\n
        return max;\n
        }\n
        public static void main(String[] args) {\n\n
        int a = 11;\n
        int b = 12 ;\n
        int c = maxFunction(a,b);\n\n
        System.out.println(\"Maximum Value = \"+c);\n\n
        }\n\n
        }
    </item>
<item>
        import java.util.Scanner;\n\n

        class Main {\n\n
        public static void main(String[] args) {\n\n
        Scanner sc = new Scanner(System.in);\n\n
        if(sc.nextInt()>5)\n\n
        System.out.println("too large");\n\n
        }\n\n
        }
    </item>
        <item>
        import java.util.Scanner;\n\n

        class Main {\n\n
        public static void main(String[] args) {\n\n
        Scanner sc = new Scanner(System.in);\n\n
        if(sc.nextInt()>5)\n\n
        System.out.println(\"too large\");\n\n
        else  System.out.println(\"too small\");\n\n
        } \n\n
        }
    </item>


    <item>
        class Main {\n\n
        public static void main(String[] args) {\n\n
        int num1=2;\n\n
        int num2=1;\n\n
         if(num1>num2){\n\n
  System.out.println(num2 +\" is the smallest value\" );\n\n
  }else if(!(num1>num2)){\n\n
 System.out.println(num1 +\" is the smallest value\");\n\n
        }\n\n
        }\n\n
        }
    </item>

    <item>
        class Main {\n\n
        public static void main(String[] args) {\n\n
        int num=6;\n\n

        if(!(num>10)){\n\n
        System.out.println\"The number is not larger than 10\");\n\n
        }\n\n
        }\n\n
        }\n
         </item>
        <item>class Main {\n\n


  public static void main(String[] args) {\n\n
      int type = 3;\n
      String animals;\n

    switch(type){\n
    case 1:\n
      animals=\"cat\";\n
      break;\n\n
    case 2: \n
      animals=\"dog\";\n
      break;\n\n
    case 3:\n
      animals=\"bird\";\n
      break;\n\n
    default:\n
      animals=\"wolf\";\n
      break;\n\n
    }\n
    System.out.println(animals);\n\n


  }\n
            //Find the output of the program ______\n\n\n
}</item>
        <item> int x = 5;\n\n

      while( x &lt;= 10 ) {\n\n
         System.out.print(x);\n\n
         x++;\n\n
      }\n
            //Find the output of the program ______\n\n\n</item>
    <item>
        class Main {\n\n
        public static void main(String[] args) {\n\n
        for(int i=1;i&lt;=10i++){\n\n
        System.out.println(i);\n\n
        }\n\n
        }\n\n
        }   </item>



<item>
        class Main {\n\n
        public static void main(String[] args) {\n\n
        int x=1;\n
        do{\n
        System.out.println(x);\n
        x++;\n
        }while(x&lt;=10);\n

        }\n\n
        }\n
</item>

<item>
        class Main {\n\n
        public static void main(String[] args) {\n\n
        char[] chararray ={\'H\',\'E\',\'L\',\'L\',\'O\'};\n\n
        System.out.println(chararray);\n\n
        }\n\n
        }
        </item>
        <item>class Main {\n\n
  public static void main(String[] args) {\n\n
   int [ ] arr = {9,1,2,3};\n\n
int sum=0;\n\n
for(int x=0; x&lt;arr.length;x++){\n\n
  sum+=arr[x];\n

}\n
System.out.println(sum);\n\n
  }\n\n
}\n\n
      //Find the output of the program ______\n\n\n   </item>
<item>
        class Main {\n\n
        public static void main(String[] args) {\n\n
        int[] Intarray ={0,1,2,3,4,5};\n\n
        for(int element:Intarray){\n\n
        System.out.println(element);\n\n
        }\n\n
        }\n\n
        }
</item>
        <item>class Main {\n\n
  public static void main(String[] args) {\n\n
    int[ ][ ] sample = { {8,11,3}, {12,5,4} };\n\n
int x = sample[0][1];\n\n
System.out.println(x);\n\n


  }\n

}\n\n
        // Find the output of the program ______</item>
        <item>A constructor can perform any action, but\n\n designed to perform initializing actions, such \n\nas initializing the data fields of objects.</item>
        <item>class Main {\n\n

  static void ______() {\n\n
    System.out.println(\"Hello World!\");\n\n
  }\n\n

  public static void main(String[ ] args) {\n\n
    HelloWorld();\n\n

  }\n\n
}\n\n

// Hello World!\n\n\n</item>

        <item>class Main {\n\n

 public ______ sum(int num) {\n\n
  if(num==5){\n\n
       return \"Return value is \"+ num;\n\n
  }\n\n
  else{\n\n
    return "Return value is not 5";\n\n
  }\n\n


}\n\n

  public static void main(String[ ] args) {\n\n
    Main a = new Main();\n\n
   System.out.println(a.sum(4));\n\n


  }\n\n
}\n\n\n

</item>
        <item>class Main {\n\n

   String color;\n\n
   int age;\n\n

   public Main(String color,int age) {\n\n
    this.color=color;\n
    this.age=age;\n\n

   }\n\n

   public static void main(String []args) {\n\n
      // Following statement would create an object Dog\n\n
     ______\n\n


	   System.out.println(\" Color  :  \" + myDog.color +\" Age :  \" +myDog.age);\n\n
   }\n\n
}\n\n\n</item>
        <item>Provides the same access as the default access modifier, with the addition that subclasses can access protected methods and variables of the superclass.</item>
        <item>public class Car {\n\n
  private String color;\n\n

  //Write a Getter method\n
 ______\n\n

 // Setter method\n\n
  public void setColor(String c) {\n\n
    this.color = c;\n\n
  //The keyword this is used to refer to the current object.\n\n
  }\n\n
}\n\n\n</item>

<item>
        class Main {\n\n
        int age;\n\n

        Main(int age){\n\n
        this.age= age;\n\n
        }\n\n


        public static void main(String[] args) {\n\n

        Main main = new Main(20);\n\n
        System.out.print(main.age);\n\n

        }\n\n
        }
        </item>

        <item>public class valueType {\n\n
  public static void main(String[ ] args) {\n\n
    int x = 5;\n
    Increment(x);\n
    System.out.println(x);\n
  }\n
  static void Increment(int num) {\n
    num = num + 1;\n
  }\n
}\n\n
       // Find the output of the program ______\n\n\n </item>
        <item>
            import java.lang.Math;\n\n

class Main {\n\n

  public static void main(String[] args) {\n\n
    int num1=0;\n
    int num2=1;\n\n\n


   System.out.print(Math.min(num1,num2) + " is the minimum value");\n\n

    }\n\n
  }
        </item>
        <item>-The static method can not use non static data member (eg variable)or call non-static method directly.\n \n
            OR \n\n

-this and super cannot be used in static context.

</item>
        <item>We can use final keyword with method, attribute or class.\n
            A variable marked with final can be assigned only once.\n\n\n
            A method or class marked with final\n
            so that they can\'t be overridden and classes
            therefore they can\'t be made subclasses.\n
        </item>
        <item>package mypack; \n\n
public class Simple{  \n\n
 public static void main(String args[]){\n\n
    System.out.println("Welcome to mypack package");\n\n
   }  \n\n
}  \n\n
       // ans:  ______</item>
        <item> class BankAccount {\n\n
  ______ double balance=0;\n\n
  public void deposit(double x) {\n\n
    if(x > 0) {\n\n
      balance += x;\n\n
    }\n\n
  }\n\n
}\n\n\n</item>
        <item>
            class Employee{ \n\n
 float salary=50000;  \n\n
}  \n\n
class  ______{\n\n
 int bonus=50000; \n\n
 public static void main(String args[]){\n\n
   Programmer p=new Programmer();  \n\n
   System.out.println(\"Programmer salary is:\"+p.salary);\n\n
   System.out.println(\"Bonus of Programmer is:\"+p.bonus);  \n\n
}  \n\n
}  \n\n
        </item>
        <item>
            class Car{  \n\n
  void run(){System.out.println(\"running\");\n\n}
}  \n\n
class Vehicle extends Car{\n\n
  void run(){System.out.println(\"running safely with 120km\");\n\n}\n\n

  public static void main(String args[]){  \n\n
    Car b = new Vehicle();//upcasting  \n\n
    b.run();  \n\n
  }  \n\n
}  \n\n
            //The output is : ______\n\n\n\n
        </item>
        <item>\n\nWe can set two methods which have the same name, but different parameters, it is known as method ______. This can be very useful that you can use the same method with different types of parameters.</item>
        <item>abstract class Animal {\n\n
  int legs = 0;\n
  ______\n\n
}\n\n


class Cat extends Animal {\n\n
  public void soundEffect() {\n\n
    System.out.println(\"wo\");\n\n
  }\n\n
}\n\n</item>
        <item>public interface SomethingIsWrong {\n\n
    void aMethod(int aValue) {\n\n
        System.out.println("Hi Mom");\n\n
    }\n\n
}\n\n\n\n
        //ans(correct or wrong):   ______ \n\n\n\n</item>
        <item>double a =5.3;\n
            int b = ______ a;\n
System.out.println(b);\n
//Outputs 5\n\n\n</item>
        <item>public class A {\n\n
    int variable = 0; \n
}\n

public class Demo extends A{\n

}\n

public void testDowncast(){\n\n
    Demo myClass = new Demo();\n\n
    myClass.variable = 2;\n\n
    A morphingTime = myClass;\n\n
    System.out.println(\"And now Power Ranger Demo has turned into Mighty A:\");\n\n
    System.out.println(\"I am: \"+morphingTime.getClass() + \" and my variable is: \" + morphingTime.variable);\n\n
}\n\n\n\n
       //ans:  ______\n\n\n\n\n\n</item>
        <item>class Car {\n\n
  public void start() {\n\n
    System.out.println("Starting...");\n\n
  }\n\n
}  \n\n\n
public static void main(String[ ] args) {\n
  Car c2 = new Car() {\n
    @Override public void start() {\n
      System.out.println("Wooooo");\n
    }\n
  };\n\n
  Car c2 = new Car();\n
  c2.start();\n
  }\n\n
//The output: "______"\n\n\n\n
</item>
        <item>public class Main {\n\n

    // Create an array\n\n
    private final static int SIZE = 10;\n\n
    private int[] intArray = new int[SIZE];\n\n\n

    public Main() {\n\n
        // fill the array with ascending integer values\n\n
        for (int i = 0; i &lt; SIZE; i++) {\n\n
            intArray[i] = i;\n\n
        }\n\n
    }\n\n\n

    public void printEven() {\n\n\n

        // Print out values of even indices of the array\n\n
        DataIterator iterator = this.new Even();\n\n
        while (iterator.hasNext()) {\n\n
            System.out.print(iterator.next() + \" \");\n\n
        }\n\n
        System.out.println();\n\n
    }\n\n\n

    interface DataIterator extends java.util.Iterator&lt;Integer> { }\n\n

    // Inner class implements the DataIterator interface,\n\n
    // which extends the Iterator&lt;Integer> interface\n\n

    private class Even implements DataIterator {\n\n\n

        // Start stepping through the array from the beginning\n\n
        private int nextIndex = 0;\n\n

        public boolean hasNext() {\n\n

            // Check if the current element is the last in the array\n\n
            return (nextIndex &lt;= SIZE - 1);\n
        }        \n\n

        public Integer next() {\n\n

            // Record a value of an even index of the array\n\n
            Integer retValue = Integer.valueOf(intArray[nextIndex]);\n\n

            // Get the next even element\n\n
            nextIndex += 2;\n\n
            return retValue;\n\n
        }\n
    }\n\n

    public static void main(String s[]) {\n\n

        // Fill the array with integer values and print out only\n
        // values of even indices\n
        Main ds = new Main();\n
        ds.printEven();\n
    }\n
}\n\n
            //Output : ______\n\n\n\n\n
</item>
        <item>class MyClass {\n\n
  public static void main(String[ ] args) {\n\n
    Animal a1 = new Animal("Robby");\n
    Animal a2 = new Animal("Robby");\n
    System.out.println(a1 == a2);\n\n
  }\n\n
}\n\n\n
        //ans:  ______\n\n\n\n</item>
        <item> ......\n\n
 enum Soldier{\n
   ARROW,\n
   SWORD,\n
   BOMB\n
 } \n
 ......\n\n

Soldier a = ______;\n\n

switch(a) {\n
  case ARROW:\n
    System.out.println(\"Arrow!\");\n
    break;\n
  case SWORD:\n
    System.out.println(\"Sword!\");\n
  break;\n
  case BOMB:\n
    System.out.println(\"BOMB!\");\n
    break;\n
}\n
//Outputs \"BOMB!\"\n\n\n\n</item>
        <item>\n\n\n\n\n\n\n\n\n______</item>


        <item>Java throw keyword is used to explicitly throw an exception.Java throws keyword is used to declare an exception.\n\n

OR
\n\n
Checked exception cannot be propagated using throw only.Checked exception can be propagated with throws.\n\n

OR\n\n

Throw is followed by an instance.Throws is followed by class.
Throw is used within the method.Throws is used with the method signature.\n\n

OR\n\n

You cannot throw multiple exceptions.You can declare multiple exceptions through throws e.g.\n
public void method()throws IOException,SQLException.\n\n\n\n\n
</item>
        <item>
            class MyThread extends Thread{  \n\n
public void run(){  \n\n
System.out.println(\"thread is running...\");  \n\n
}  \n\n
public static void main(String args[]){  \n\n
MyThread t1=new MyThread();  \n\n
t1.______;  \n\n
 }  \n\n
} \n\n
// Output : thread is running...\n\n\n\n
        </item>
        <item>import java.util.ArrayList;\n\n

public class Main {\n\n
  public static void main(String[ ] args) {\n\n
    ArrayList colors = new ArrayList();\n\n
    colors.add(\"Blue\");\n
    colors.add(\"Green\");\n
    colors.add(\"Red\");\n
    colors.add(\"Orange\");\n
    colors.remove(\"Blue\");\n\n
    System.out.println(colors);\n\n
  }\n\n
}\n\n
// Output: ______\n\n\n</item>
        <item>The ArrayList is better for storing and accessing data, as it is very similar to a normal array.\n\n\n
The LinkedList is better for manipulating data, such as making numerous inserts and deletes.\n</item>
        <item>import java.util.HashMap;\n\n
public class Main {\n\n
  public static void main(String[ ] args) {\n\n
    HashMap points = new HashMap();\n
    points.put(\"John\", 40);\n
    points.remove(\"John\");\n
    points.put(\"Peter\", 154);\n
    points.put(\"Bob\", 30);\n
    points.put(\"John\", 130);\n
    System.out.println(points.get(\"John\"));
  }\n\n
}\n\n
// Outputs ______\n\n\n</item>
        <item>import java.util.HashSet;\n\n

public class Main {\n\n
  public static void main(String[ ] args) {\n\n
    HashSet set = new HashSet();\n\n
    set.add(\"ABC\");\n
    set.add(\"DEF\");\n
    set.add(\"DEF\");\n

    System.out.println(set);\n\n
  }\n\n
}\n\n
//  Output: ______\n\n\n</item>
        <item>import java.util.ArrayList;\n\n
import java.util.Collections;\n\n

public class Main {\n\n
  public static void main(String[ ] args) {\n\n
    ArrayList nums = new ArrayList();\n
    nums.add(10);\n
    nums.add(10);\n
    nums.add(33);\n
    nums.add(34);\n
    nums.add(2);\n

    Collections.sort(nums);\n
    System.out.println(nums);\n
  }\n\n
}\n\n
            // Output : ______ \n\n\n
</item>
        <item>
            import java.util.Iterator;\n
import java.util.LinkedList;\n\n
public class Main {\n\n
  public static void main(String[ ] args) {\n\n
    LinkedList animals = new LinkedList();\n\n
    String value=\"\";\n
    animals.add(\"tiger\");\n
    animals.add(\"lion\");\n
    animals.add(\"bird\");\n
    animals.add(\"monkey\");\n\n

       Iterator it = animals.iterator();\n\n
        //use variable value to assign the LinkedList value (Hints: use hasNext()to evaluate the existence of next element)\n\n
       while______\n\n

  }\n\n
}\n\n
/*\n\n
Output:\n
tiger\n
lion\n
bird\n
monkey\n
*/\n\n\n\n
        </item>
        <item>______</item>
        <item>import java.io.File;\n
import java.io.FileNotFoundException;\n
import java.util.Scanner;\n\n
public class Main {\n\n

public static void main(String[] args) {\n\n
//create a file object where the file location : \"C:\\ITDog\\test.txt\"
    ______\n\n


    try {\n\n

        Scanner sc = new Scanner(file);\n\n

        while (sc.hasNextLine()) {\n
            int i = sc.nextInt();\n
            System.out.println(i);\n
        }\n
        sc.close();\n
    } \n
    catch (FileNotFoundException e) {\n
        e.printStackTrace();\n
    }\n
 }\n
}\n\n\n</item>
        <item>import java.util.Formatter;\n\n

public class Main {\n\n
   public static void main(String[ ] args) {\n\n
  try {\n\n
    Formatter f = new \n Formatter(\"C:\\\\ITDog\\\\test.txt\");\n
    f.______(\"%s %s %s\", \"3\",\"John\", \"Chan \r\n\");\n
    f.______(\"%s %s %s\", \"2\",\"May\", \"Chan\");\n
    f.close();    \n
  } catch (Exception e) {\n
    System.out.println(\"Error\");\n
  }\n
  }\n\n
}\n\n\n</item>
    </string-array>

</resources>
